---
- name: Compute site names
  set_fact:
    sites: "{{ groups['datagrid'] | map('extract', hostvars, 'site') | unique }}"

- name: Compute network parameters
  set_fact:
    datagrid_network:
      bind_address: "{{ bind_address | default(ansible_ssh_host) }}"
      jgroups_bind_address: "{{ jgroups_bind_address | default(ansible_ssh_host) }}"
      nodename: "{{ nodename | default(inventory_hostname) }}"

- name: Compute cache parameters
  set_fact:
    datagrid_caches:
      actionTokens:
        configuration: "{{ cache_action_tokens_configuration | default('sync') }}"
      clientSessions:
        configuration: "{{ cache_client_sessions_configuration | default('sync') }}"
      loginFailures:
        configuration: "{{ cache_login_failures_configuration | default('local') }}"
      offlineClientSessions:
        configuration: "{{ cache_offline_client_sessions_configuration | default('sync') }}"
      offlineSessions:
        configuration: "{{ cache_offline_sessions_configuration | default('sync') }}"
      sessions:
        configuration: "{{ cache_sessions_configuration | default('sync') }}"
      work:
        configuration: "{{ cache_work_configuration | default('sync') }}"

- name: Initialize site hosts
  set_fact:
    datagrid_site_nodes: []
    datagrid_nodes: []
    datagrid_node_count: "{{ groups['datagrid'] | length }}"

- name: Compute site hosts
  set_fact:
    datagrid_site_nodes: "{{ datagrid_site_nodes + [ hostvars[item].datagrid_network.nodename ]  }}"
  when: "hostvars[item].site == site"
  loop: "{{ groups['datagrid'] }}"

- name: Compute hosts
  set_fact:
    datagrid_nodes: "{{ datagrid_nodes + [ hostvars[item].datagrid_network.nodename ] }}"
  loop: "{{ groups['datagrid'] }}"

- name: Check if the unit file is present
  stat:
    path: "/etc/systemd/system/{{ unit.name }}.service"
  register: unit_file

# In case of rerun, make sure the services are stopped, so we don't create a mess
- name: Ensure service is stopped
  service:
    name: "{{ unit.name }}"
    enabled: no
    state: stopped
  when: unit_file.stat.exists
