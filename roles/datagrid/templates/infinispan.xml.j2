<infinispan
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="urn:infinispan:config:12.1 https://infinispan.org/schemas/infinispan-config-12.1.xsd
                            urn:infinispan:server:12.1 https://infinispan.org/schemas/infinispan-server-12.1.xsd"
        xmlns="urn:infinispan:config:12.1"
        xmlns:server="urn:infinispan:server:12.1">

  <jgroups>
      <!-- This is the Cross Data Center cluster configuration -->
      <stack name="global-cluster" extends="tcp">
         <TCPPING initial_hosts="{{ datagrid_nodes | map('regex_replace', '^(.*)$', '\\1[7801]') | join(',') }}"
                     stack.combine="REPLACE" stack.position="MPING"/>
      </stack>
      <stack name="xsite" extends="tcp">
          <TCPPING initial_hosts="{{ datagrid_site_nodes | map('regex_replace', '^(.*)$', '\\1[7800]') | join(',') }}"
             stack.combine="REPLACE" stack.position="MPING"/>

          <relay.RELAY2 xmlns="urn:org:jgroups"
                       site="{{ site }}"
                       max_site_masters="{{ max_number_of_masters | default(datagrid_node_count) }}"
                       can_become_site_master="true"/>

          <remote-sites default-stack="global-cluster">
          {% for site_name in sites %}
            <remote-site name="{{ site_name }}"/>
          {% endfor %}
          </remote-sites>
      </stack>
   </jgroups>

   <cache-container name="default" statistics="true">
      <transport cluster="{{ site }}" stack="xsite" node-name="{{ datagrid_network.nodename }}"/>
      <security>
         <authorization/>
      </security>
      <distributed-cache-configuration name="rhsso-sync" statistics="true" mode="SYNC">
         <locking acquire-timeout="0" />
         <backups>
          {% for site_name in sites %}
            {% if site_name != site %}
            <backup site="{{ site_name }}" strategy="SYNC">
              <take-offline min-wait="120000"/>
            </backup>
            {% endif %}
         {% endfor %}
         </backups>
      </distributed-cache-configuration>

      <distributed-cache-configuration name="rhsso-async" statistics="true" mode="SYNC">
        <locking acquire-timeout="0" />
        <backups>
          {% for site_name in sites %}
            {% if site_name != site %}
            <backup site="{{ site_name }}" strategy="ASYNC">
              <take-offline min-wait="120000"/>
            </backup>
            {% endif %}
          {% endfor %}
         </backups>
      </distributed-cache-configuration>

      <distributed-cache-configuration name="rhsso-local" statistics="true">
        <locking acquire-timeout="0"/>
      </distributed-cache-configuration>

      <distributed-cache name="actionTokens" configuration="rhsso-async" />
      <distributed-cache name="clientSessions" configuration="rhsso-async" />
      <distributed-cache name="loginFailures" configuration="rhsso-local" />
      <distributed-cache name="offlineClientSessions" configuration="rhsso-async" />
      <distributed-cache name="offlineSessions" configuration="rhsso-async" />
      <distributed-cache name="sessions" configuration="rhsso-async" />
      <distributed-cache name="work" configuration="rhsso-async" />
   </cache-container>

   <server xmlns="urn:infinispan:server:12.1">
      <interfaces>
         <interface name="public">
            <inet-address value="${infinispan.bind.address:127.0.0.1}"/>
         </interface>
      </interfaces>

      <socket-bindings default-interface="public" port-offset="${infinispan.socket.binding.port-offset:0}">
         <socket-binding name="default" port="${infinispan.bind.port:11222}"/>
      </socket-bindings>

      <security>
         <credential-stores>
            <credential-store name="credentials" path="credentials.pfx">
               <clear-text-credential clear-text="secret"/>
            </credential-store>
         </credential-stores>
         <security-realms>
            <security-realm name="default">
               <!-- Uncomment to enable TLS on the realm -->
               <!-- server-identities>
                  <ssl>
                     <keystore path="application.keystore"
                               keystore-password="password" alias="server" key-password="password"
                               generate-self-signed-certificate-host="localhost"/>
                  </ssl>
               </server-identities-->
               <properties-realm groups-attribute="Roles">
                  <user-properties path="users.properties"/>
                  <group-properties path="groups.properties"/>
               </properties-realm>
            </security-realm>
         </security-realms>
      </security>

      <endpoints socket-binding="default" security-realm="default">
        <hotrod-connector name="hotrod">
          <authentication>
            <sasl mechanisms="SCRAM-SHA-512 DIGEST-MD5"
                  server-name="infinispan" />
          </authentication>
        </hotrod-connector>
        <rest-connector name="rest"/>
      </endpoints>
   </server>
</infinispan>
